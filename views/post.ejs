<!doctype html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>게시물 보기</title>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />
    <link rel="stylesheet" href="/stylesheets/index.css" />
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet" />
    <link rel="stylesheet" href="/stylesheets/footer.css" />
</head>

<body>
    <%-include('nav')%>

        <%-include('side')%>

            <div class="container mt-3">
                <h3 id="post-title"></h3>
                <!-- 상단 부분 -->
                <div class="row">
                    <div class="col s2">
                        <!-- 글쓴이의 이미지 -->
                        <img src="path_to_author_image.jpg" alt="Author Image" class="circle responsive-img"
                            id="post-user-image" />
                    </div>
                    <div class="col s8">
                        <h5 id="post-user-nickname"></h5>
                        <p id="createdAT"></p>
                    </div>
                    <div class="col s2">
                        <!-- 프로필 보기 버튼 -->
                        <a class="waves-effect waves-light btn grey darken-3" style="margin-top: 15px; width: 120px">프로필
                            보기</a>

                        <div id="myPost">
                            <a id="postedit" href="/postedit" class="waves-effect waves-light btn grey darken-3"
                                style="margin-top: 15px; width: 120px">수정</a>
                            <form action="/api/post/<%= postId%>?_method=delete" method="post">
                                <button id="postdelete" onclick="postDel()" type="submit"
                                    class="waves-effect waves-light btn grey darken-3"
                                    style="margin-top: 15px; width: 120px">삭제</button>
                            </form>
                        </div>


                    </div>
                </div>

                <!-- 게시물 내용 -->
                <div id="post-content" class="card"></div>

                <!-- 덧글 목록 -->
                <ul class="collection with-header" id="post-comments-container">
                    <!-- 여기에 덧글 목록을 동적으로 추가할 수 있습니다. -->
                </ul>
                <!-- 덧글 입력 폼 -->
                <div class="row">
                    <div class="input-field col s10">
                        <textarea id="comment-input" class="materialize-textarea"></textarea>
                        <label for="comment-input">덧글을 입력하세요...</label>
                    </div>
                    <div class="col s2">
                        <a class="waves-effect waves-light btn grey darken-3" onclick="submitComment()"
                            style="width: 120px">등록</a>
                    </div>
                </div>
            </div>

            <div id="post-container" data-post-id="<%= postId %>">
                <!-- 다른 내용들을 추가할 수 있습니다. -->
            </div>
            <div id="login-container" data-user-id="<%= id %>">
                <!-- 다른 내용들을 추가할 수 있습니다. -->
            </div>

            <%-include('footer')%>

                <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
                <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
                <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>

                <script>
                    // 새로고침

                    let postId =
                        document.getElementById("post-container").dataset.postId;
                    let loginId =
                        document.getElementById("login-container").dataset.userId;
                    console.log("로그인ID", loginId)
                    let userId;
                    let content;

                    document.addEventListener("DOMContentLoaded", async function () {
                        // 게시물 내용을 가져와 Quill Editor로 표시
                        var postContent =
                            "<p>여기에 Quill Editor에서 가져온 내용이 들어갑니다.</p>"; // 여기에 실제로 받아온 게시물 내용을 삽입하세요.

                        // Quill Editor 초기화
                        var postQuill = new Quill("#post-content", {
                            readOnly: true,
                            theme: "snow",
                            modules: {
                                toolbar: false,
                            },
                        });

                        await fetch(`/api/post/${postId}`)
                            .then((response) => response.json())
                            .then(async (response) => {
                                console.log("postId", response);
                                userId = response.data.userId;
                                console.log("이거다", userId)
                                content = response.data.content;

                                document.getElementById("post-title").innerText =
                                    response.data.title;

                                document.getElementById("createdAT").innerHTML = response.data.createdAt.slice(0, 19)


                                if (userId !== parseInt(loginId)) {
                                    document.getElementById('myPost').style.display = "none";
                                } else {
                                    document.getElementById('myPost').style.display = "block";
                                }
                                await fetch(`/api/user/${parseInt(userId)}`)
                                    .then((response) => response.json())
                                    .then((response) => {
                                        console.log("userId", response.data.id);

                                        document.getElementById("post-user-image").src =
                                            response.data.imgUrl;

                                        document.getElementById(
                                            "post-user-nickname",
                                        ).innerText = response.data.nickName;
                                    })
                                    .catch((error) =>
                                        console.error("에러 발생:", error),
                                    );

                                await fetch(`/api/post/${postId}/comment`)
                                    .then((response) => response.json())
                                    .then((response) => {
                                        console.log("comment", response);

                                        let container = document.getElementById(
                                            "post-comments-container",
                                        );
                                        response.data.forEach((element) => {
                                            var newItem = document.createElement("li");
                                            newItem.textContent = element.comment;
                                            container.appendChild(newItem);
                                        });
                                    })
                                    .catch((error) =>
                                        console.error("에러 발생:", error),
                                    );
                            })
                            .catch((error) => console.error("에러 발생:", error));

                        // 게시물 내용을 Quill Editor에 삽입 //포스트내용 postContent
                        postQuill.clipboard.dangerouslyPasteHTML(content);
                    });

                    // 덧글 등록 함수
                    function submitComment() {
                        var commentInput =
                            document.getElementById("comment-input").value;
                        // 여기에 덧글 등록 및 목록 갱신 로직을 추가합니다.
                        // console.log("덧글 등록:", commentInput);

                        fetch(`/api/post/${postId}/comment`, {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                                // 다른 필요한 헤더가 있다면 여기에 추가
                            },
                            body: JSON.stringify({
                                comment: commentInput,
                            }),
                        })
                            .then((response) => response.json())
                            .then((data) => console.log(data))
                            .catch((error) => console.error("Error:", error));
                    }

                    // 게시글 삭제
                    const postDel = () => {
                        fetch(`/api/post/${postId}`, {
                            method: "DELETE",
                            headers: {
                                "Content-Type": "application/json",
                                // 다른 필요한 헤더가 있다면 여기에 추가
                            },
                        })
                            .then((res) => res.json())
                            .then((data) => {
                                if (data.success) {
                                    console.log("삭제")
                                    window.location.href = "/"
                                } else {
                                    alert(data.message)
                                }
                            })
                    }


                    // 게시글 수정
                </script>
</body>

</html>